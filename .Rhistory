id = "id",
crs_transform = FALSE,
new_crs = 4326),
regexp = "New CRS is ignored, use crs_transform = TRUE")
}
)
test_that(
"check CRS transformation inputs", {
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE),
regexp = "No new CRS provided")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE,
new_crs = "4326"),
regexp = "New CRS is not numeric")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE,
new_crs = 43266),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE,
new_crs = 20),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE,
new_crs = 145),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
}
)
test_that(
"check CRS inputs for spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE),
regexp = "No new CRS provided")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE,
new_crs = "4326"),
regexp = "New CRS is not numeric")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE,
new_crs = 43266),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE,
new_crs = 20),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE,
new_crs = 145),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
expect_warning(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = FALSE,
new_crs = 4326),
regexp = "New CRS is ignored, use crs_transform = TRUE")
}
)
test_that(
"wrong IDs not allowed", {
expect_error(dyadicdist::ddist(data = df,
id = "id",
latitude = "test"),
regexp = "The provided latitude variable is not present in data.")
expect_error(dyadicdist::ddist(data = df,
id = "id",
longitude = "test"),
regexp = "The provided longitude variable is not present in data.")
}
)
# test_that(
#   "check quality of spatial inputs", {
#
#     expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lat,
#                                       id = "id"))
#
#     expect_error(dyadicdist::ddist_sf(data = df_sf_hi_lat,
#                                       id = "id"))
#
#     expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lon,
#                                       id = "id"))
#
#     expect_error(dyadicdist::ddist_sf(data = df_sf_hi_lon,
#                                       id = "id"))
#
#   }
# )
rm(df, df_1, df_2, df_char_lat, df_char_lon)
rm(df, df_1, df_2, df_char_lat, df_char_lon, df_hi_lat, df_hi_lon)
rm(df, df_1, df_2, df_char_lat, df_char_lon, df_hi_lat, df_hi_lon,
df_lo_lat, df_lo_lon, df_na_id, df_na_lat, df_na_lon)
rm(df, df_1, df_2, df_char_lat, df_char_lon, df_hi_lat, df_hi_lon,
df_lo_lat, df_lo_lon, df_na_id, df_na_lat, df_na_lon, df_sf,
df_sf_1, df_sf_2)
rm(df, df_1, df_2, df_char_lat, df_char_lon, df_hi_lat, df_hi_lon,
df_lo_lat, df_lo_lon, df_na_id, df_na_lat, df_na_lon, df_sf,
df_sf_1, df_sf_2, dup, dup_sf, kc, kc_sf)
rm(df, df_1, df_2, df_char_lat, df_char_lon, df_hi_lat, df_hi_lon,
df_lo_lat, df_lo_lon, df_na_id, df_na_lat, df_na_lon, df_sf,
df_sf_1, df_sf_2, dup, dup_sf, kc, kc_sf, df_sf_na_id)
rm(df, df_1, df_2, df_char_lat, df_char_lon, df_hi_lat, df_hi_lon,
df_lo_lat, df_lo_lon, df_na_id, df_na_lat, df_na_lon, df_sf,
df_sf_1, df_sf_2, dup, dup_sf, kc, kc_sf, df_sf_na_id, mat)
context("Test ddist")
library(dplyr)
library(magrittr)
library(tibble)
df <- dyadicdist::cities
test_that("output dimensions work", {
expect_equal(nrow(dyadicdist::ddist(cities,
id = "id",
diagonal = TRUE,
duplicates = TRUE)),
nrow(df) * nrow(df))
})
test_that("output dimensions work", {
expect_equal(nrow(dyadicdist::ddist(cities,
id = "id",
diagonal = FALSE,
duplicates = TRUE)),
(nrow(df) * nrow(df)) - nrow(df))
})
test_that("output dimensions work", {
expect_equal(nrow(dyadicdist::ddist(cities,
id = "id",
diagonal = TRUE,
duplicates = FALSE)),
(nrow(df)*nrow(df))/2+(nrow(df)/2))
})
test_that("output dimensions work", {
expect_equal(nrow(dyadicdist::ddist(cities,
id = "id",
diagonal = FALSE,
duplicates = FALSE)),
(nrow(df)*nrow(df))/2-(nrow(df)/2))
})
test_that("distance units work", {
expect_equal(dyadicdist::ddist(df,
id = "id") %>%
pull(distance_units) %>%
unique(),
"m")
})
test_that("distance units work", {
expect_equal(dyadicdist::ddist(df,
id = "id",
crs_transform = TRUE,
new_crs = 3359) %>%
pull(distance_units) %>%
unique(),
"US_survey_foot")
})
rm(df)
context("Test ddist_sf")
library(dplyr)
library(magrittr)
library(tibble)
df <- dyadicdist::cities
df <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
test_that("output dimensions work", {
expect_equal(nrow(dyadicdist::ddist_sf(df,
id = "id",
diagonal = TRUE,
duplicates = TRUE)),
nrow(df) * nrow(df))
})
test_that("output dimensions work", {
expect_equal(nrow(dyadicdist::ddist_sf(df,
id = "id",
diagonal = FALSE,
duplicates = TRUE)),
(nrow(df) * nrow(df)) - nrow(df))
})
test_that("output dimensions work", {
expect_equal(nrow(dyadicdist::ddist_sf(df,
id = "id",
diagonal = TRUE,
duplicates = FALSE)),
(nrow(df)*nrow(df))/2+(nrow(df)/2))
})
test_that("output dimensions work", {
expect_equal(nrow(dyadicdist::ddist_sf(df,
id = "id",
diagonal = FALSE,
duplicates = FALSE)),
(nrow(df)*nrow(df))/2-(nrow(df)/2))
})
test_that("distance units work", {
expect_equal(dyadicdist::ddist_sf(df,
id = "id") %>%
pull(distance_units) %>%
unique(),
"m")
})
test_that("distance units work", {
expect_equal(dyadicdist::ddist_sf(df,
id = "id",
crs_transform = TRUE,
new_crs = 3359) %>%
pull(distance_units) %>%
unique(),
"US_survey_foot")
})
library(de)
library(devtools)
test()
library(devtools)
library(usethis)
library(roxygen2)
rm(list=ls())
## code to prepare `cities` dataset goes here
library(magrittr)
city_url <- "https://www.latlong.net/category/cities-236-15.html"
cities <- city_url %>%
rvest::read_html() %>%
rvest::html_nodes("table")
cities <- rbind(rvest::html_table(cities[[1]])) %>%
janitor::clean_names()
cities <- cities %>%
dplyr::mutate(city = sapply(strsplit(as.character(cities$place_name),","), "[", 1),
state = sapply(strsplit(as.character(cities$place_name),","), "[", 2),
country = sapply(strsplit(as.character(cities$place_name),","), "[", 3)) %>%
dplyr::select(-place_name)
cities <- cities %>%
dplyr::mutate(id = base::sample.int((nrow(.)*5),
nrow(.),
replace = FALSE))
cities <- cities %>%
dplyr::mutate(city = stringr::str_trim(city, side = "both"),
state = stringr::str_trim(state, side = "both"),
country = stringr::str_trim(country, side = "both"))
cities <- cities %>%
dplyr::mutate(country = "USA") %>%
dplyr::mutate(state = ifelse(state == "Illinois", "IL", state)) %>%
dplyr::mutate(state = ifelse(state == "Il", "IL", state)) %>%
dplyr::mutate(state = ifelse(state == "South Dakota", "SD", state))
usethis::use_data(cities, overwrite = TRUE, internal = FALSE)
## code to prepare test data goes here
df <- dyadicdist::cities
df_sf <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_1 <- df %>%
filter(state == "CA")
df_2 <- df %>%
filter(state == "TX")
df_sf_1 <- df_sf %>%
filter(state == "CA")
df_sf_2 <- df_sf %>%
filter(state == "TX")
kc <- df %>%
filter(city == "Kansas City")
kc_sf <- df_sf %>%
filter(city == "Kansas City")
dup <- rbind(df,
kc)
dup_sf <- rbind(df_sf,
kc_sf)
mat <- df %>% as.matrix()
df_na_id <- df %>%
mutate(id = ifelse(city == "Kansas City",
NA,
id))
df_na_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
NA,
latitude))
df_na_lon <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
NA,
longitude))
df_char_lat <- df %>%
mutate(latitude = as.character(latitude))
df_char_lon <- df %>%
mutate(longitude = as.character(longitude))
df_sf_na_id <- df_sf %>%
mutate(id = ifelse(city == "Kansas City",
NA,
id))
df_lo_lon <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
-181,
longitude))
df_hi_lon <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
181,
longitude))
df_lo_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
-91,
longitude))
df_hi_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
91,
longitude))
getwd()
saveRDS("inst/extdata/df_1.rds")
df_sf <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_1 <- df %>%
filter(state == "CA")
saveRDS(df_1,
"inst/extdata/df_1.rds")
## code to prepare `cities` dataset goes here
library(magrittr)
city_url <- "https://www.latlong.net/category/cities-236-15.html"
cities <- city_url %>%
rvest::read_html() %>%
rvest::html_nodes("table")
cities <- rbind(rvest::html_table(cities[[1]])) %>%
janitor::clean_names()
cities <- cities %>%
dplyr::mutate(city = sapply(strsplit(as.character(cities$place_name),","), "[", 1),
state = sapply(strsplit(as.character(cities$place_name),","), "[", 2),
country = sapply(strsplit(as.character(cities$place_name),","), "[", 3)) %>%
dplyr::select(-place_name)
cities <- cities %>%
dplyr::mutate(id = base::sample.int((nrow(.)*5),
nrow(.),
replace = FALSE))
cities <- cities %>%
dplyr::mutate(city = stringr::str_trim(city, side = "both"),
state = stringr::str_trim(state, side = "both"),
country = stringr::str_trim(country, side = "both"))
cities <- cities %>%
dplyr::mutate(country = "USA") %>%
dplyr::mutate(state = ifelse(state == "Illinois", "IL", state)) %>%
dplyr::mutate(state = ifelse(state == "Il", "IL", state)) %>%
dplyr::mutate(state = ifelse(state == "South Dakota", "SD", state))
usethis::use_data(cities, overwrite = TRUE, internal = FALSE)
## code to prepare test data goes here
df <- dyadicdist::cities
df_sf <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
saveRDS(df_sf,
"inst/extdata/df_sf.rds")
df_1 <- df %>%
filter(state == "CA")
saveRDS(df_1,
"inst/extdata/df_1.rds")
df_2 <- df %>%
filter(state == "TX")
saveRDS(df_2,
"inst/extdata/df_2.rds")
df_sf_1 <- df_sf %>%
filter(state == "CA")
saveRDS(df_sf_1,
"inst/extdata/df_sf_1.rds")
df_sf_2 <- df_sf %>%
filter(state == "TX")
saveRDS(df_sf_2,
"inst/extdata/df_sf_2.rds")
kc <- df %>%
filter(city == "Kansas City")
saveRDS(kc,
"inst/extdata/kc.rds")
kc_sf <- df_sf %>%
filter(city == "Kansas City")
saveRDS(kc_sf,
"inst/extdata/kc_sf.rds")
dup <- rbind(df,
kc)
saveRDS(dup,
"inst/extdata/dup.rds")
dup_sf <- rbind(df_sf,
kc_sf)
saveRDS(dup_sf,
"inst/extdata/dup_sf.rds")
mat <- df %>% as.matrix()
saveRDS(mat,
"inst/extdata/mat.rds")
## code to prepare `cities` dataset goes here
library(magrittr)
city_url <- "https://www.latlong.net/category/cities-236-15.html"
cities <- city_url %>%
rvest::read_html() %>%
rvest::html_nodes("table")
cities <- rbind(rvest::html_table(cities[[1]])) %>%
janitor::clean_names()
cities <- cities %>%
dplyr::mutate(city = sapply(strsplit(as.character(cities$place_name),","), "[", 1),
state = sapply(strsplit(as.character(cities$place_name),","), "[", 2),
country = sapply(strsplit(as.character(cities$place_name),","), "[", 3)) %>%
dplyr::select(-place_name)
cities <- cities %>%
dplyr::mutate(id = base::sample.int((nrow(.)*5),
nrow(.),
replace = FALSE))
cities <- cities %>%
dplyr::mutate(city = stringr::str_trim(city, side = "both"),
state = stringr::str_trim(state, side = "both"),
country = stringr::str_trim(country, side = "both"))
cities <- cities %>%
dplyr::mutate(country = "USA") %>%
dplyr::mutate(state = ifelse(state == "Illinois", "IL", state)) %>%
dplyr::mutate(state = ifelse(state == "Il", "IL", state)) %>%
dplyr::mutate(state = ifelse(state == "South Dakota", "SD", state))
usethis::use_data(cities, overwrite = TRUE, internal = FALSE)
## code to prepare test data goes here
df <- dyadicdist::cities
df_sf <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
saveRDS(df_sf,
"inst/extdata/df_sf.rds")
df_1 <- df %>%
filter(state == "CA")
saveRDS(df_1,
"inst/extdata/df_1.rds")
df_2 <- df %>%
filter(state == "TX")
saveRDS(df_2,
"inst/extdata/df_2.rds")
df_sf_1 <- df_sf %>%
filter(state == "CA")
saveRDS(df_sf_1,
"inst/extdata/df_sf_1.rds")
df_sf_2 <- df_sf %>%
filter(state == "TX")
saveRDS(df_sf_2,
"inst/extdata/df_sf_2.rds")
kc <- df %>%
filter(city == "Kansas City")
saveRDS(kc,
"inst/extdata/kc.rds")
kc_sf <- df_sf %>%
filter(city == "Kansas City")
saveRDS(kc_sf,
"inst/extdata/kc_sf.rds")
dup <- rbind(df,
kc)
saveRDS(dup,
"inst/extdata/dup.rds")
dup_sf <- rbind(df_sf,
kc_sf)
saveRDS(dup_sf,
"inst/extdata/dup_sf.rds")
mat <- df %>% as.matrix()
saveRDS(mat,
"inst/extdata/mat.rds")
###################################################
df_na_id <- df %>%
mutate(id = ifelse(city == "Kansas City",
NA,
id))
saveRDS(df_na_id,
"inst/extdata/df_na_id.rds")
df_na_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
NA,
latitude))
saveRDS(df_na_lat,
"inst/extdata/df_na_lat.rds")
df_na_lon <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
NA,
longitude))
saveRDS(df_na_lon,
"inst/extdata/df_na_lon.rds")
df_char_lat <- df %>%
mutate(latitude = as.character(latitude))
saveRDS(df_char_lat,
"inst/extdata/df_char_lat.rds")
df_char_lon <- df %>%
mutate(longitude = as.character(longitude))
saveRDS(df_char_lon,
"inst/extdata/df_char_lon.rds")
df_sf_na_id <- df_sf %>%
mutate(id = ifelse(city == "Kansas City",
NA,
id))
saveRDS(df_sf_na_id,
"inst/extdata/df_sf_na_id.rds")
df_lo_lon <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
-181,
longitude))
saveRDS(df_lo_lon,
"inst/extdata/df_lo_lon.rds")
df_hi_lon <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
181,
longitude))
saveRDS(df_hi_lon,
"inst/extdata/df_hi_lon.rds")
df_lo_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
-91,
longitude))
saveRDS(df_lo_lat,
"inst/extdata/df_lo_lat.rds")
df_hi_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
91,
longitude))
saveRDS(df_hi_lat,
"inst/extdata/df_hi_lat.rds")
rm(list=ls())
document()
