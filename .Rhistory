regexp = "Inputdata must be a data.frame or similar.")
}
)
test_that(
"only spatial data.frames/tibbles allowed as input data in ddist_sf()", {
expect_error(dyadicdist::ddist_sf(data = df,
id = "id"),
regexp = "Inputdata must be an object of class sf. Use dyadicdist::ddist()")
expect_error(dyadicdist::ddist_sf(data = mat,
id = "id"),
regexp = "Inputdata must be an object of class sf. Use dyadicdist::ddist()")
}
)
test_that(
"duplicate IDs not allowed in mono input functions", {
expect_error(dyadicdist::ddist(data = dup,
id = "id"),
regexp = "ID does not uniquely identify rows, duplicates exist")
expect_error(dyadicdist::ddist_sf(data = dup_sf,
id = "id"),
regexp = "ID does not uniquely identify rows, duplicates exist")
}
)
test_that(
"missing IDs not allowed", {
expect_error(dyadicdist::ddist(data = df),
regexp = "No id variable provided")
expect_error(dyadicdist::ddist_sf(data = df_sf),
regexp = "No id variable provided")
}
)
test_that(
"wrong IDs not allowed", {
expect_error(dyadicdist::ddist(data = df,
id = "test"),
regexp = "The provided id variable is not present in data.")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "test"),
regexp = "The provided id variable is not present in data.")
}
)
test_that(
"NAs in ID(s) not allowed", {
expect_error(dyadicdist::ddist(data = df_na_id,
id = "id"),
regexp = "The provided ID variable contains NAs")
expect_error(dyadicdist::ddist_sf(data = df_sf_na_id,
id = "id"),
regexp = "The provided ID variable contains NAs")
}
)
test_that(
"check quality of coords", {
expect_error(dyadicdist::ddist(data = df_na_lat,
id = "id"),
regexp = "The provided id variable is not present in data.")
}
)
test_that(
"check quality of coords", {
expect_error(dyadicdist::ddist(data = df_na_lat,
id = "id"),
regexp = "The provided longitude variable contains NAs")
}
)
test_that(
"check quality of coords", {
expect_error(dyadicdist::ddist(data = df_na_lat,
id = "id"),
regexp = "The provided latitude variable contains NAs")
}
)
test_that(
"check quality of coords", {
expect_error(dyadicdist::ddist(data = df_na_lat,
id = "id"),
regexp = "The provided latitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_na_lon,
id = "id"),
regexp = "The provided longitude variable contains NAs")
}
)
df_char_lat <- df %>%
mutate(latitude = as.character(latitude))
df_char_lon <- df %>%
mutate(latitude = as.character(longitude))
test_that(
"check quality of coords", {
expect_error(dyadicdist::ddist(data = df_na_lat,
id = "id"),
regexp = "The provided latitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_na_lon,
id = "id"),
regexp = "The provided longitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_char_lon,
id = "id"),
regexp = "The provided longitude variable is not numeric")
expect_error(dyadicdist::ddist(data = df_char_lat,
id = "id"),
regexp = "The provided latitude variable is not numeric")
}
)
df_char_lon <- df %>%
mutate(longitude = as.character(longitude))
test_that(
"check quality of coords", {
expect_error(dyadicdist::ddist(data = df_na_lat,
id = "id"),
regexp = "The provided latitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_na_lon,
id = "id"),
regexp = "The provided longitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_char_lon,
id = "id"),
regexp = "The provided longitude variable is not numeric")
expect_error(dyadicdist::ddist(data = df_char_lat,
id = "id"),
regexp = "The provided latitude variable is not numeric")
}
)
df_lo_lon <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
-181,
longitude))
df_hi_lon <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
181,
longitude))
df_lo_lat <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
-91,
longitude))
df_hi_lat <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
91,
longitude))
test_that(
"check quality of coords", {
expect_error(dyadicdist::ddist(data = df_na_lat,
id = "id"),
regexp = "The provided latitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_na_lon,
id = "id"),
regexp = "The provided longitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_char_lon,
id = "id"),
regexp = "The provided longitude variable is not numeric")
expect_error(dyadicdist::ddist(data = df_char_lat,
id = "id"),
regexp = "The provided latitude variable is not numeric")
expect_error(dyadicdist::ddist(data = df_lo_lat,
id = "id"),
regexp = "Inputdata contains invalid latitude coordinates, one or more values < -90")
}
)
df_lo_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
-91,
longitude))
df_hi_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
91,
longitude))
test_that(
"check quality of coords", {
expect_error(dyadicdist::ddist(data = df_na_lat,
id = "id"),
regexp = "The provided latitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_na_lon,
id = "id"),
regexp = "The provided longitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_char_lon,
id = "id"),
regexp = "The provided longitude variable is not numeric")
expect_error(dyadicdist::ddist(data = df_char_lat,
id = "id"),
regexp = "The provided latitude variable is not numeric")
expect_error(dyadicdist::ddist(data = df_lo_lat,
id = "id"),
regexp = "Inputdata contains invalid latitude coordinates, one or more values < -90")
}
)
test_that(
"check quality of coords", {
expect_error(dyadicdist::ddist(data = df_na_lat,
id = "id"),
regexp = "The provided latitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_na_lon,
id = "id"),
regexp = "The provided longitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_char_lon,
id = "id"),
regexp = "The provided longitude variable is not numeric")
expect_error(dyadicdist::ddist(data = df_char_lat,
id = "id"),
regexp = "The provided latitude variable is not numeric")
expect_error(dyadicdist::ddist(data = df_lo_lat,
id = "id"),
regexp = "Inputdata contains invalid latitude coordinates, one or more values < -90")
expect_error(dyadicdist::ddist(data = df_hi_lat,
id = "id"),
regexp = "Inputdata contains invalid latitude coordinates, one or more values > 90")
}
)
test_that(
"check quality of coords", {
expect_error(dyadicdist::ddist(data = df_na_lat,
id = "id"),
regexp = "The provided latitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_na_lon,
id = "id"),
regexp = "The provided longitude variable contains NAs")
expect_error(dyadicdist::ddist(data = df_char_lon,
id = "id"),
regexp = "The provided longitude variable is not numeric")
expect_error(dyadicdist::ddist(data = df_char_lat,
id = "id"),
regexp = "The provided latitude variable is not numeric")
expect_error(dyadicdist::ddist(data = df_lo_lat,
id = "id"),
regexp = "Inputdata contains invalid latitude coordinates, one or more values < -90")
expect_error(dyadicdist::ddist(data = df_hi_lat,
id = "id"),
regexp = "Inputdata contains invalid latitude coordinates, one or more values > 90")
expect_error(dyadicdist::ddist(data = df_lo_lon,
id = "id"),
regexp = "Inputdata contains invalid longitude coordinates, one or more values < -180")
expect_error(dyadicdist::ddist(data = df_hi_lon,
id = "id"),
regexp = "Inputdata contains invalid longitude coordinates, one or more values > 180")
}
)
test_that(
"check CRS inputs", {
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = "4326"),
regexp = "Provided CRS is not numeric")
}
)
test_that(
"check CRS inputs", {
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = "4326"),
regexp = "Provided CRS is not numeric")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = 4333),
regexp = "Provided CRS is not valid, see rgdal::make_EPSG()")
}
)
test_that(
"check CRS inputs", {
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = "4326"),
regexp = "Provided CRS is not numeric")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = 43266),
regexp = "Provided CRS is not valid, see rgdal::make_EPSG()")
}
)
test_that(
"check CRS inputs", {
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = "4326"),
regexp = "Provided CRS is not numeric")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = 43266),
regexp = "Provided CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = 1),
regexp = "Provided CRS is not valid, see rgdal::make_EPSG()")
}
)
test_that(
"check CRS inputs", {
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = "4326"),
regexp = "Provided CRS is not numeric")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = 43266),
regexp = "Provided CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = 1),
regexp = "Provided CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs = 156),
regexp = "Provided CRS is not valid, see rgdal::make_EPSG()")
}
)
test_that(
"check CRS transformation inputs", {
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE),
regexp = "No new CRS provided")
}
)
test_that(
"check CRS transformation inputs", {
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE),
regexp = "No new CRS provided")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE,
new_crs = "4326"),
regexp = "New CRS is not numeric")
}
)
test_that(
"check CRS transformation inputs", {
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE),
regexp = "No new CRS provided")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE,
new_crs = "4326"),
regexp = "New CRS is not numeric")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE,
new_crs = 43266),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE,
new_crs = 20),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist(data = df,
id = "id",
crs_transform = TRUE,
new_crs = 145),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
}
)
df_sf_hi_lat <- df_hi_lat %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_sf_lo_lon <- df_lo_lon %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_sf_hi_lon <- df_hi_lon %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_sf_lo_lat <- df_lo_lat %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_sf_hi_lat <- df_hi_lat %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
test_that(
"check quality of spatial inputs", {
expect_error(dyadicdist::ddist(data = df_sf_lo_lat,
id = "id",
crs_transform = TRUE),
regexp = "Inputdata contains invalid latitude coordinates, one or more values < -90")
}
)
test_that(
"check quality of spatial inputs", {
expect_error(dyadicdist::ddist(data = df_sf_lo_lat,
id = "id"),
regexp = "Inputdata contains invalid latitude coordinates, one or more values < -90")
}
)
test_that(
"check quality of spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lat,
id = "id"),
regexp = "Inputdata contains invalid latitude coordinates, one or more values < -90")
}
)
test_that(
"check quality of spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lat,
id = "id"),
regexp = "Inputdata contains invalid latitude coordinates, one or more values < -90")
}
)
ddist_sf(data = df_sf_lo_lat,
id = "id"
ddist_sf(data = df_sf_lo_lat,
id = "id")
ddist_sf(data = df_sf_lo_lat,
id = "id")
test_that(
"check quality of spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lat,
id = "id"))
}
)
ddist_sf(data = df_sf_lo_lat,
id = "id")
test_that(
test_that(
"check quality of spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lat,
id = "id"))
}
)
test_that(
"check quality of spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lat,
id = "id"))
}
)
test_that(
"check quality of spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lat,
id = "id"))
}
)
ddist_sf(data = df_sf_lo_lat,
id = "id")
ddist_sf(data = df_sf_lo_lat,
id = "id")
test_that(
"check quality of spatial inputs", {
expect_warning(dyadicdist::ddist_sf(data = df_sf_lo_lat,
id = "id"))
}
)
test_that(
"check quality of spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lat,
id = "id"))
}
)
ddist_sf(data = df_sf_lo_lat,
id = "id")
test_that(
"check quality of spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lat,
id = "id"))
expect_error(dyadicdist::ddist_sf(data = df_sf_hi_lat,
id = "id"))
expect_error(dyadicdist::ddist_sf(data = df_sf_lo_lon,
id = "id"))
expect_error(dyadicdist::ddist_sf(data = df_sf_hi_lon,
id = "id"))
}
)
ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE)
ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE,
new_crs = 4326)
ddist_sf(data = df_sf,
id = "id",
crs_transform = FALSE,
new_crs = 4326)
test_that(
"check CR inputs for spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE),
regexp = "No new CRS provided")
# expect_error(dyadicdist::ddist_sf(data = df_sf,
#                                   id = "id",
#                                   crs_transform = FALSE,
#                                   new_crs = 4326))
}
)
test_that(
"check CR inputs for spatial inputs", {
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE),
regexp = "No new CRS provided")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE,
new_crs = "4326"),
regexp = "New CRS is not numeric")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE,
new_crs = 43266),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE,
new_crs = 20),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "id",
crs_transform = TRUE,
new_crs = 145),
regexp = "New CRS is not valid, see rgdal::make_EPSG()")
# expect_error(dyadicdist::ddist_sf(data = df_sf,
#                                   id = "id",
#                                   crs_transform = FALSE,
#                                   new_crs = 4326))
}
)
document()
