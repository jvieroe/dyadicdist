})
use_test()
?context
df <- dyadicdist::cities
library(dplyr)
library(magritrr)
df <- dyadicdist::cities
library(magrittr)
library(dplyr)
library(magrittr)
context("Test input data")
df_sf <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_1 <- df %>%
filter(state == "CA")
df_2 <- df %>%
filter(state == "TX")
df_sf_1 <- df_sf %>%
filter(sstate == "CA")
df_sf_1 <- df_sf %>%
filter(state == "CA")
df_sf_2 <- df_sf %>%
filter(state == "TX")
ny <- df %>%
filter(city == "New York City")
View(ny)
ny <- df %>%
filter(city == "New York")
rm(ny)
chicago <- df %>%
filter(city == "Chicago")
chicago <- df %>%
filter(city == "chicago")
View(chicago)
View(df)
rm(chicago)
kc <- df %>%
filter(city == "Kansas City")
dup <- rbind(df,
kc)
test_that(
"duplicate IDs not allowed in mono input functions",
expect_error(
dyadicdist::ddist(data = dup,
id = "id")
)
)
test_that(
"duplicate IDs not allowed in mono input functions" {
expect_error(
dyadicdist::ddist(data = dup,
id = "id")
)
}
)
test_that(
"duplicate IDs not allowed in mono input functions" {
expect_error(dyadicdist::ddist(data = dup,
id = "id"))
}
)
test_that(
"duplicate IDs not allowed in mono input functions", {
expect_error(dyadicdist::ddist(data = dup,
id = "id"))
}
)
test_that(
"duplicate IDs not allowed in mono input functions", {
expect_error(dyadicdist::ddist(data = df,
id = "id"))
}
)
test_that(
"duplicate IDs not allowed in mono input functions", {
expect_error(dyadicdist::ddist(data = dup,
id = "id"),
regexp = "xx")
}
)
test_that(
"duplicate IDs not allowed in mono input functions", {
expect_error(dyadicdist::ddist(data = dup,
id = "id"),
regexp = "ID does not uniquely identify rows, duplicates exist")
}
)
context("Test input data")
library(dplyr)
library(magrittr)
df <- dyadicdist::cities
df_sf <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_1 <- df %>%
filter(state == "CA")
df_2 <- df %>%
filter(state == "TX")
df_sf_1 <- df_sf %>%
filter(state == "CA")
df_sf_2 <- df_sf %>%
filter(state == "TX")
kc <- df %>%
filter(city == "Kansas City")
kc_sf <- df_sf %>%
filter(city == "Kansas City")
dup <- rbind(df,
kc)
dup_sf <- rbind(df_sf,
kc_sf)
test_that(
"duplicate IDs not allowed in mono input functions", {
expect_error(dyadicdist::ddist(data = dup,
id = "id"),
regexp = "ID does not uniquely identify rows, duplicates exist")
expect_error(dyadicdist::ddist(data = dup_sf,
id = "id"),
regexp = "ID does not uniquely identify rows, duplicates exist")
}
)
test_that(
"duplicate IDs not allowed in mono input functions", {
expect_error(dyadicdist::ddist(data = dup,
id = "id"),
regexp = "ID does not uniquely identify rows, duplicates exist")
expect_error(dyadicdist::ddist_sf(data = dup_sf,
id = "id"),
regexp = "ID does not uniquely identify rows, duplicates exist")
}
)
test_that(
"missing/wrong IDs not allowed in", {
expect_error(dyadicdist::ddist(data = df),
regexp = "ID does not uniquely identify rows, duplicates exist")
expect_error(dyadicdist::ddist_sf(data = df_sf),
regexp = "ID does not uniquely identify rows, duplicates exist")
}
)
test_that(
"missing/wrong IDs not allowed in", {
expect_error(dyadicdist::ddist(data = df),
regexp = "No id variable provided")
expect_error(dyadicdist::ddist_sf(data = df_sf),
regexp = "No id variable provided")
}
)
test_that(
"missing/wrong IDs not allowed in", {
expect_error(dyadicdist::ddist(data = df),
regexp = "No id variable provided")
expect_error(dyadicdist::ddist_sf(data = df_sf),
regexp = "No id variable provided")
expect_error(dyadicdist::ddist(data = df,
id = "test"),
regexp = "No id variable provided")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "test"),
regexp = "No id variable provided")
}
)
test_that(
"missing/wrong IDs not allowed in", {
expect_error(dyadicdist::ddist(data = df),
regexp = "No id variable provided")
expect_error(dyadicdist::ddist_sf(data = df_sf),
regexp = "No id variable provided")
expect_error(dyadicdist::ddist(data = df,
id = "test"),
regexp = "The provided id variable is not present in data.")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "test"),
regexp = "The provided id variable is not present in data.")
}
)
test_that(
"wrong IDs not allowed in", {
expect_error(dyadicdist::ddist(data = df,
id = "test"),
regexp = "The provided id variable is not present in data.")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "test"),
regexp = "The provided id variable is not present in data.")
}
)
class(df)
is.data.frame(df)
mat <- df %>% as.matrix()
mat
test_that(
"only data.frames/tibbles allowed as input data in ddist()", {
expect_error(dyadicdist::ddist(data = mat,
id = "test"),
regexp = "Inputdata must be a data.frame or similar.")
}
)
test_that(
"only data.frames/tibbles allowed as input data in ddist()", {
expect_error(dyadicdist::ddist(data = df_sf,
id = "test"),
regexp = "Inputdata must be a data.frame or similar.")
}
)
test_that(
"only data.frames/tibbles allowed as input data in ddist()", {
expect_error(dyadicdist::ddist(data = mat,
id = "test"),
regexp = "Inputdata must be a data.frame or similar.")
}
)
expect_error(dyadicdist::ddist_sf(data = df,
id = "test"),
regexp = "Inputdata must be a data.frame or similar.")
test_that(
"only data.frames/tibbles allowed as input data in ddist()", {
expect_error(dyadicdist::ddist_sf(data = df,
id = "test"),
regexp = "Inputdata must be a data.frame or similar.")
}
)
test_that(
"only data.frames/tibbles allowed as input data in ddist()", {
expect_error(dyadicdist::ddist_sf(data = df,
id = "test"),
regexp = "Inputdata must be an object of class sf. Use dyadicdist::ddist()")
}
)
test_that(
"only data.frames/tibbles allowed as input data in ddist()", {
expect_error(dyadicdist::ddist(data = mat,
id = "id"),
regexp = "Inputdata must be a data.frame or similar.")
}
)
test_that(
"only data.frames/tibbles allowed as input data in ddist()", {
expect_error(dyadicdist::ddist_sf(data = df,
id = "id"),
regexp = "Inputdata must be an object of class sf. Use dyadicdist::ddist()")
}
)
test_that(
"only spatial data.frames/tibbles allowed as input data in ddist_sf()", {
expect_error(dyadicdist::ddist_sf(data = df,
id = "id"),
regexp = "Inputdata must be an object of class sf. Use dyadicdist::ddist()")
expect_error(dyadicdist::ddist_sf(data = mat,
id = "id"),
regexp = "Inputdata must be an object of class sf. Use dyadicdist::ddist()")
}
)
test_that(
"only spatial data.frames/tibbles allowed as input data in ddist_sf()", {
expect_error(dyadicdist::ddist_sf(data = df,
id = "id"),
regexp = "Inputdata must be an object of class sf. Use dyadicdist::ddist()")
expect_error(dyadicdist::ddist_sf(data = mat,
id = "id"),
regexp = "Inputdata must be a data.frame or similar.")
}
)
test_that(
"only spatial data.frames/tibbles allowed as input data in ddist_sf()", {
expect_error(dyadicdist::ddist_sf(data = df,
id = "id"),
regexp = "Inputdata must be an object of class sf. Use dyadicdist::ddist()")
expect_error(dyadicdist::ddist_sf(data = mat,
id = "id"),
regexp = "Inputdata must be an object of class sf. Use dyadicdist::ddist()")
}
)
test_that(
"only data.frames/tibbles allowed as input data in ddist()", {
expect_error(dyadicdist::ddist(data = mat,
id = "id"),
regexp = "Inputdata must be a data.frame or similar.")
}
)
ddist_sf(data = mat, id = "id")
document()
library(devtools)
library(roxygen2)
use_coverage()
use_github_action("test-coverage")
document()
use_github_action("test-coverage")
library(badger)
badger::badge_github_version()
badger::badge_github_version(color = "dodgerblue")
test_that(
"check quality of spatial data in ddist_sf()", {
expect_error(dyadicdist::ddist(data = df,
id = "test"),
regexp = "The provided id variable is not present in data.")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "test"),
regexp = "The provided id variable is not present in data.")
}
)
library(testthat)
library(dyadicdist)
test_check("dyadicdist")
context("Test input data")
library(dplyr)
library(magrittr)
df <- dyadicdist::cities
df_sf <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_1 <- df %>%
filter(state == "CA")
df_2 <- df %>%
filter(state == "TX")
df_sf_1 <- df_sf %>%
filter(state == "CA")
df_sf_2 <- df_sf %>%
filter(state == "TX")
kc <- df %>%
filter(city == "Kansas City")
kc_sf <- df_sf %>%
filter(city == "Kansas City")
dup <- rbind(df,
kc)
dup_sf <- rbind(df_sf,
kc_sf)
mat <- df %>% as.matrix()
test_that(
"only data.frames/tibbles allowed as input data in ddist()", {
expect_error(dyadicdist::ddist(data = mat,
id = "id"),
regexp = "Inputdata must be a data.frame or similar.")
}
)
test_that(
"check quality of spatial data in ddist_sf()", {
expect_error(dyadicdist::ddist(data = df,
id = "test"),
regexp = "The provided id variable is not present in data.")
expect_error(dyadicdist::ddist_sf(data = df_sf,
id = "test"),
regexp = "The provided id variable is not present in data.")
}
)
library(devtools)
library(devtools)
library()
library(roxygen2)
install_github("jvieroe/dyadicdist")
library(testthat)
library(dyadicdist)
test_check("dyadicdist")
rlang::last_error()
context("Test input data")
library(dplyr)
library(magrittr)
df <- dyadicdist::cities
df_sf <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_1 <- df %>%
filter(state == "CA")
df_2 <- df %>%
filter(state == "TX")
df_sf_1 <- df_sf %>%
filter(state == "CA")
df_sf_2 <- df_sf %>%
filter(state == "TX")
kc <- df %>%
filter(city == "Kansas City")
kc_sf <- df_sf %>%
filter(city == "Kansas City")
dup <- rbind(df,
kc)
dup_sf <- rbind(df_sf,
kc_sf)
mat <- df %>% as.matrix()
df_na_id <- df %>%
mutate(id = ifelse(city == "Kansas City",
NA,
id))
df_na_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
NA,
latitude))
df_na_lon <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
NA,
longitude))
context("Test input data")
library(dplyr)
library(magrittr)
df <- dyadicdist::cities
df_sf <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_1 <- df %>%
filter(state == "CA")
df_2 <- df %>%
filter(state == "TX")
df_sf_1 <- df_sf %>%
filter(state == "CA")
df_sf_2 <- df_sf %>%
filter(state == "TX")
kc <- df %>%
filter(city == "Kansas City")
kc_sf <- df_sf %>%
filter(city == "Kansas City")
dup <- rbind(df,
kc)
dup_sf <- rbind(df_sf,
kc_sf)
mat <- df %>% as.matrix()
df_na_id <- df %>%
mutate(id = ifelse(city == "Kansas City",
NA,
id))
df_na_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
NA,
latitude))
df_na_lon <- df_sf %>%
mutate(longitude = ifelse(city == "Kansas City",
NA,
longitude))
df_sf_na_id <- df_sf %>%
mutate(id = ifelse(city == "Kansas City",
NA,
id))
context("Test input data")
library(dplyr)
library(magrittr)
df <- dyadicdist::cities
df_sf <- df %>%
sf::st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
df_1 <- df %>%
filter(state == "CA")
df_2 <- df %>%
filter(state == "TX")
df_sf_1 <- df_sf %>%
filter(state == "CA")
df_sf_2 <- df_sf %>%
filter(state == "TX")
kc <- df %>%
filter(city == "Kansas City")
kc_sf <- df_sf %>%
filter(city == "Kansas City")
dup <- rbind(df,
kc)
dup_sf <- rbind(df_sf,
kc_sf)
mat <- df %>% as.matrix()
df_na_id <- df %>%
mutate(id = ifelse(city == "Kansas City",
NA,
id))
df_na_lat <- df %>%
mutate(latitude = ifelse(city == "Kansas City",
NA,
latitude))
df_na_lon <- df %>%
mutate(longitude = ifelse(city == "Kansas City",
NA,
longitude))
df_sf_na_id <- df_sf %>%
mutate(id = ifelse(city == "Kansas City",
NA,
id))
test_that(
"NAs in ID(s) not allowed", {
expect_error(dyadicdist::ddist(data = df_na_id,
id = "id"),
regexp = "The provided ID variable contains NAs")
expect_error(dyadicdist::ddist_sf(data = df_sf_na_id,
id = "id"),
regexp = "The provided ID variable contains NAs")
}
)
View(df_na_id)
test_that(
"NAs in ID(s) not allowed", {
expect_error(dyadicdist::ddist(data = df_na_id,
id = "id"),
regexp = "The provided ID variable contains NAs")
# expect_error(dyadicdist::ddist_sf(data = df_sf_na_id,
#                                   id = "id"),
#              regexp = "The provided ID variable contains NAs")
}
)
test_that(
"NAs in ID(s) not allowed", {
# expect_error(dyadicdist::ddist(data = df_na_id,
#                                id = "id"),
#              regexp = "The provided ID variable contains NAs")
expect_error(dyadicdist::ddist_sf(data = df_sf_na_id,
id = "id"),
regexp = "The provided ID variable contains NAs")
}
)
View(df_sf)
View(df_na_id)
test_that(
"NAs in ID(s) not allowed", {
expect_error(dyadicdist::ddist(data = df_na_id,
id = "id"),
regexp = "The provided ID variable contains NAs")
expect_error(dyadicdist::ddist_sf(data = df_sf_na_id,
id = "id"),
regexp = "The provided ID variable contains NAs")
}
)
document()
